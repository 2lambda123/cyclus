// RecipeLogger.cpp
// Implements the RecipeLogger class

#include "RecipeLogger.h"

#include "IsotopicDefinitions.h"
#include "MassTable.h"
#include "CycException.h"
#include "InputXML.h"

using namespace std;

// initialize singleton member
RecipeLogger* RecipeLogger::instance_ = 0;
// initialize logging members
int RecipeLogger::nextStateID_ = 0;
RecipeMap RecipeLogger::recipes_;
DecayChainMap RecipeLogger::decay_chains_;
DecayTimesMap RecipeLogger::decay_times_;
// initialize table member
table_ptr RecipeLogger::iso_table = new Table("IsotopicStates"); 

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
RecipeLogger* RecipeLogger::Instance() {
  // If we haven't created a RecipeLogger yet, create and return it.
  if (0 == instance_){
    instance_ = new RecipeLogger();  
  }
  return instance_;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RecipeLogger::RecipeLogger() {}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void RecipeLogger::load_recipes() {
  // load recipes from file
  xmlNodeSetPtr nodes = XMLinput->get_xpath_elements("/*/recipe");
  string name;
  CLOG(LEV_DEBUG2) << "loading recipes {";
  for (int i = 0; i < nodes->nodeNr; i++) {
    name = XMLinput->getCurNS() + 
                  XMLinput->get_xpath_content(nodes->nodeTab[i], "name");
    CLOG(LEV_DEBUG2) << "Adding recipe '" << name << "'.";
    load_recipe(nodes->nodeTab[i]); // load recipe
  }

  // load recipes from databases
  nodes = XMLinput->get_xpath_elements("/*/recipebook");
  string filename, ns, format;
  for (int i = 0; i < nodes->nodeNr; i++) {
    filename = XMLinput->get_xpath_content(nodes->nodeTab[i], "filename");
    ns = XMLinput->get_xpath_content(nodes->nodeTab[i], "namespace");
    format = XMLinput->get_xpath_content(nodes->nodeTab[i], "format");
    XMLinput->extendCurNS(ns);

    if ("xml" == format) {
      CLOG(LEV_DEBUG2) << "going into a recipe book...";
      XMLinput->load_recipebook(filename);  // load recipe book
    } 
    else {
      throw 
        CycRangeException(format + "is not a supported recipebook format.");
    }
    XMLinput->stripCurNS();
  }
  CLOG(LEV_DEBUG2) << "}";
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void RecipeLogger::load_recipe(xmlNodePtr cur) {
  // initialize comp map
  CompMap* mass_fractions = new CompMap();

  // get general values from xml
  string name = XMLinput->get_xpath_content(cur,"name");
  string basis = XMLinput->get_xpath_content(cur,"basis");
  xmlNodeSetPtr isotopes = XMLinput->get_xpath_elements(cur,"isotope");

  // get values needed for composition
  double value;
  int key;
  xmlNodePtr iso_node;
  for (int i = 0; i < isotopes->nodeNr; i++) {
    iso_node = isotopes->nodeTab[i];
    key = strtol(XMLinput->get_xpath_content(iso_node,"id"), NULL, 10);
    value = strtod(XMLinput->get_xpath_content(iso_node,"comp"), NULL);

    if (basis == "atom") {
      value = value / MT->gramsPerMol(key);
    }
    else {
      throw CycIOException(basis + " basis is not 'mass' or 'atom'.");
    }

    // update our mass-related values
    (*mass_fractions)[key] = value;
  }
  
  // make a new composition
  comp_t recipe = comp_t(mass_fractions);

  // log this composition (static members and database)
  logRecipe(name,recipe);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void RecipeLogger::logRecipe(std::string name, comp_t &recipe) {
  if ( !recipeLogged(name) ) {
    logRecipe(recipe); // log this with the database
    recipes_[name] = recipe; // store this as a named recipe, copies recipe
    storeDecayableRecipe(recipe(name)); // store this as a decayable recipe
  }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
bool RecipeLogger::recipeLogged(std::string name) {
  int count = recipes_.count(name);
  return (count != 0); // true iff name in recipes_
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void RecipeLogger::logRecipe(comp_t &recipe) {
  if (!recipe.logged()) {
    recipe.ID = nextStateID_++;
    addToTable(recipe);
  }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
comp_t& RecipeLogger::recipe(std::string name) {
  return recipes_[name];
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void IsoVector::storeDecayableRecipe(comp_t &recipe) {
  // initialize containers
  decay_times* times = new decay_times();
  DaughterMap* daughters = new DaughterMap();
  // assign containers
  decay_times_[recipe] = *times;
  decay_chains_[recipe] = *daughters;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void IsoVector::logRecipeDecay(comp_t &parent, comp_t &child, 
                               int t_i, int t_f) {
  decay_times* times = decayTimes(parent);
  times->insert(t_f);
  DaughterMap* daughters = Daughters(parent);
  addDaughter(daughters,child,t_f);
  child->parent = parent;
  child->decay_time = t_f - t_i;
  logRecipe(child);
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
int IsoVector::recipeCount() { 
  return IsoVector::recipes_.size(); 
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
decay_times* IsoVector::decayTimes(composition* parent) {
  return decay_times_[parent];
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
DaughterMap* IsoVector::Daughters(composition* parent) {
  return decay_chains_[parent];
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
composition* IsoVector::Daughter(composition &parent, int time) {
  return Daughters(parent)[time];
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
void IsoVector::addDaughter(DaughterMap &dmap, composition &d, int time) {
  dmap[time] = d;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
void IsoVector::define_table() {
  // declare the state id columns and add it to the table
  column state_id("ID","INTEGER");
  column iso_id("IsoID","INTEGER");
  column iso_value("Value","REAL");
  iso_table->addColumn(state_id);
  iso_table->addColumn(iso_id);
  iso_table->addColumn(iso_value);
  // declare the table's primary key
  primary_key pk;
  pk.push_back("ID"), pk.push_back("IsoID");
  iso_table->setPrimaryKey(pk);
  // we've now defined the table
  iso_table->tableDefined();
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
void IsoVector::addToTable(comp_t &recipe){
  // if we haven't logged a composition yet, define the table
  if ( !iso_table->defined() ) {
    IsoVector::define_table();
  }

  // make a row - stateid first then isotopics
  // declare data
  data an_id(recipe.ID);
  // declare entries
  entry id("ID",an_id);

  // now for the composition isotopics
  CompMap* comp = recipe.mass_fractions;
  int i = 0;
  for (CompMap::iterator item = comp->begin();
       item != comp->end(); item++){
    CLOG(LEV_DEBUG2) << "isotope " << i++ << " of " << comp->size();
    // declare row
    // decalre data
    data an_iso_id(item->first), an_iso_value(item->second);
    // declare entries
    entry iso_id("IsoID",an_iso_id), iso_value("Value",an_iso_value);
    // construct row
    row aRow;
    aRow.push_back(id), aRow.push_back(iso_id), aRow.push_back(iso_value);
    // add the row
    iso_table->addRow(aRow);
    // // record this primary key
    // pkref_.push_back(id);
    // pkref_.push_back(iso_id);
  }
}

// //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// primary_key_ref IsoVector::pkref() {
//   return pkref_;
// }
